Layouts: Floats, Flexbox, and CSS Grid

Layouts - the way text, images, and other content is placed and arranged on a webpage.
        - visual structure, into which we place our content.

Building a layout: arranging page elements into a visual structure, instead of simply having them placed one after another (normal flow)

** 2 types of LAYOUT **
1. PAGE layout
2. COMPONENT layout - the smaller components inside a page layout


** 3 WAYS OF BUIDING LAYOUTS W/ CSS **

1. FLOAT LAYOUT - old way of building layout of all sizes.
                - uses the float CSS property.
                - still used, but getting outdated fast.

  +----+----+----+
  |    |    |    |
  |--> |--> |--> |
  |    |    |    |
  +----+----+----+

2. FLEXBOX - modern way of laying out elements in a 1-dimensional row w/o using floats.
           - perfect for component layouts          

 +---------------------------+
 |  +----+  +-----+  +----+  |
 |  |    |  |     |  |    |  |
 |  |----|--|-----|--|--> |  |
 |  |    |  |     |  |    |  |
 |  +----+  +-----+  +----+  |
 +---------------------------+

3. CSS GRID - laying out for complete 2-dimensional grid
            - perfect for big page layouts and complex components

 +-------------------------+
 |  +----------+  +-----+  |
 |  | +--->    |  |     |  |
 |  +-|--------+  +-----+  |  
 |  +-|---+  +----------+  | 
 |  | ↓   |  |          |  |
 |  +-----+  +----------+  |
 +-------------------------+



FLOATS
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~>
{
float: left
margin-bottom: xx
}

*Use margins instead of padding since we want space OUTSIDE the element.

*When the children elements are put into "float", the parent element will COLLAPSE since it has no more elements inside. It will only retain the height/padding if declared.


* Absolute positioning VS Floats *

Absolute positioning                                    
- out of flow                                           
- no impact on surrounding                              
- will based on the relative positioned container

Floats
- out of flow
- text/inline elements will wrap around the floated element
- will impact surrounding elements
- container element will not adjust its height to the floated element

For collapsing height:
add "clearfix" as class of the parent element in html.
.clearfix::after {
  clear: both;
  content: "";
  display: block;
}

The BOX MODEL w/ BOX-SIZING
box-sizing: border-box;

Normal Box model - final element width = right border + right padding + width + left padding + left border

Box sizing - final element width = defined width
(paddings and borders will not be added to the dimension since it will already be included in the final length of box)


FLEXBOX
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~>
Add to the container element: any parent element that has a child element.
{
  display: flex;
}

- all the flex items will follow the tallest element.
- if no height is indicated, it will just occupy the needed space for the content.

align-items: center;    -vertical center
             flex-start -element at top
             flex-end   -element at bottom
             stretch    -stretch similar to the tallest height

justify-content: center;          -horizontally centered inside the container
                 space-between    -gives space between elements
                 space-around


FLEXBOX - set of related CSS properties for building 1-dimensional layouts
        - main idea is to automatically divide the empty space inside a container element by its child elements.
        - no manual insertion of width/height
        - makes it easy to automatically align items to one another inside a parent container, both horizontally anf vertically
        - solves common problems such as vertical centering and creating equal-height columns
        - replaces floats, allowing us to write fewer and cleaner HTML and CSS code


FLEXBOX TERMINOLOGY

1. Flex container - starts flexbox {display: flex}

2. Flex items - the child elements under a parent container declared with "display: flex" ▭

3. Main axis - the direction in which the flex items are arranged →

4. Cross axis - the other perpendicular axis ↓



1. FLEX CONTAINER

1.1 gap: 0 | <length>    - create space between item w/o using margin

1.2 justify-content:                -align items along main axis (horizontally, by default)
                     flex-start       
                     flex-end
                     center
                     space-between
                     space-around
                     space-evenly

1.3 align-items:              -align items along cross axis (vertically, by default)
                 stretch       
                 flex-start
                 flex-end
                 center
                 baseline                            

1.4 flex-direction:                 -defines the main axis
                    row             
                    row-reverse
                    column
                    column-reverse                                    

1.5 flex-wrap:                -allow items to wrap into a new line if they are too large
               nowrap 
               wrap
               wrap-reverse    

1.6 align-content:                -only applies when there are multiple lines (flex-wrap: wrap)
                   stretch
                   flex-start
                   flex-end
                   center
                   space-between
                   space-around


2. FLEX ITEMS

2.1 align-self: auto          -overwrite align-itens for individual flex items
                stretch
                flex-start
                flex-end
                center
                baseline

2.2 flex-grow: 0 | <integer>      -allow an element to grow (0 means no, 1+ means yes)

2.3 flex-shrink: 1 | <integer>    -allow an element to shrink (0 means no, 1+ means yes)

2.4 flex-basis: auto | <length>   -define an item's width, instead of the width property

2.5 flex: 0 1 auto | <int> <int> <len>    -shorthand for flex-grow, -shrink, -basis

+------------------------------------------------+
| flex-grow, -shrink, -basis are flex properties |
+------------------------------------------------+

2.6 order: 0 | <integer>    -controls order of items. -1 makes item first, 1 makes it last


!!!This is not advisable!!!
By default, flex-shrink is 1 (shrink element).
If flex-basis is too large of a space (horizontally), flexbox is allowed to shrink elements to fit the container.
To combat shrinking, put flex-shrink to 0. This will follow the length of flex-basis.
!!!

Flex-grow: 1; will make the elements fill out the whole container, divided equally.
-Turn off flex-basis to see difference.
-You can use this in parent and child elements.
-If you declare flex-grow: 2; in another child element, it will grow bigger by getting the amount of the available space.
-Flex-grow: 1; is usually used.

Flex property shorthand
-flex: 1; is usually used, not flex-grow: 1;
-always use the shorthand property flex: 0 0 200px; and not the three individually.

Links
-never forget to use the link pseudo-class " :link "
-are inline elements where margin-bottom and margin-top do not apply.
-to fix this, display it as block {display: block;}


**** for unordered list (ul) - using FLEX-DIRECTION: COLUMN;
You can use {flex-direction: column;} to change the axis of the flex container
- this will make the list position right after the other instead of beside each other.
- {gap: 10px;} will also change direction
- rotate everything by 90 degrees
- main axis is vertical
- cross-axis is now horizontal

(USING FLEX-DIRECTION: COLUMN;) - vertical main axis ↓
.container ul {
  display: flex;
  flex-direction: column;
  gap: 12px;
}
RESULT: ↓
1
2
3
4

(DEFAULT) - horizontal main axis →
.container {
  display: flex;
  gap: 12px;
}
RESULT: →
1 2 3 4

-> WITH FLEX-DIRECTION SET TO COLUMN:
- align-items aligns items horizontally, no longer vertically
- justify-content aligns items vertically, no longer horizontally
- gap acts like margin-bottom, no longer like margin-right



CSS-GRID
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~>
-most modern way of building layouts
-most complete and the easiest to use
- GRID CONTAINER and GRID ITEMS
Create a grid container
{
  display: grid;
}

grid-template-columns: num num num;
                       -used to generate columns..
                       -if a column has a defined height, the entire row will stretch to the tallest column.
                       -can be used to give columns its width.

grid-template-rows: num num;
                    -can be used to give rows its height.
                    -if an element has its own defined height, it will not stretch.

gap can still be used.

What GRID CAN do that FLEXBOX CANNOT.
- define separate values for columns and rows.
column-gap:
row-gap:

CSS GRID
- set of css properties for building 2-dimensional layouts
- main idea is to divide the container element with rows and columns and fill with its child elements
- be able to write less nested HTML and easier to read CSS
- not meant to replace flexbox! They work together. 1D layout for flexbox. 2D for css grid.


CSS GRID TERMINOLOGY

1. Grid Container - main element {display: grid;}

2. Grid Items - grid container child elements

3. Row Axis → & Column Axis ↓  -cannot be changed

4. Grid Lines - lines that divide the grid and separate the columns and rows
              - numbered from 1 to number of columns+1 and the number of rows+1
              - this is important if you want to place an item at a particular place

+---+---+---+   - 4 grid lines for the columns
|   |   |   |   - 2 grid lines for rows
+---+---+---+

5. Grid Cells - the intersection box which are made by grid lines where you can place the items
              - might be filled by a grid item or not
              - these are always created, but need not to always be filled.

+---+
|   |
+---+

6. Gutters (or Gap) - spaces betweem grid items.
gap:
column-gap:
row-gap:

7. Grid Track - can be a row/column
              - row tracks or column tracks

+---+---+---+   - 2 row tracks
|   |   |   |   - 3 column tracks
+---+---+---+
|   |   |   |
+---+---+---+


1. GRID CONTAINER

1.1 grid-template-rows: <track size>*
    grid-template-columns: <track size>*
                                          -to establish grid row/columns.
                                          -one length unit for each track.
                                          -any unit can be used, new fr fills unused space.

1.2 row-gap: 0 | <length>       
    column-gap: 0 | <length>
or
    gap: 0 | <length>         -to create empty space between tracks

1.3 justify-items: stretch | start | center | end
    align-items: stretch | start | center | end
    
    - to align items inside rows/columns (horizontally/vertically)

1.4 justify-content: start | start | center | end | ...
    align-content: start | start | center | end | ...

    - align entire grid inside grid container.
    - only applies if container is larger than the grid.

    - justify-content (horizontal)
    - align-content (verticcal)


2. GRID ITEMS

2.1 grid-column: <start line> / <end line> | span <number>
    grid-row: <start line> / <end line> | span <number>

    - to place a grid item into a specific cell, based on line numbers.
    - span keyword can be used to span an item across more cells.

2.2 justify-self: stretch | start | center | end
    align-self: stretch | start | center | end

    - overwrite justify-items/align-items for single items


!!! ADDITIONAL NOTES !!!

Use of "fr"
{ex. grid-template-columns: 10px 2fr 1fr 1fr;}
- will let the content occupy the remaining space within the container.
- will let the content expand left to right if the webpage is pulled.
- but if its pushed too small, the grid will still overflow its content from the container if there's an element with a defined width.
- 1fr, 2f, 3fr, ...

Use of "repeat"
{grid-template-columns: repeat(4, 1fr);}
- this will allow the grid to have 4 columns of 1fr.

Use of "auto"
{grid-template-columns: 1fr 1fr 1fr auto}
{grid-template-rows: 1fr auto;}
- auto will only take the necessary space for its content and does not expand.

Implicit row - rows added automatically because the grid ran out of space for its contents
             - ex. if there are only 2 rows with 3 columns, but there are 8 child elements, the 2 will create a new row below.
Explicit row - explicitly defined the sizes {grid-template-rows: 300px 200px;}

Always define an explicit grid using:
grid-template-columns:
grid-template-rows:

Placing items in a particular grid:
- start at the 2nd grid line and end at 3rd grid line.
{
grid-column: 2 / 3;
grid-row: 1 / 2;
}

- if the grid line is just one line higher, you can ommit the 2nd number/end.
{
  grid-column: 2;
  grid-row: 1;
}

- start at 1 and span across 3 cells
{
  grid-column: 1 / span 3;
}
- same as 1 / 4;

- span until the end of container
{
  grid-column: 1 / -1;
}

*align-content - aligns the items inside the container.
*align-items - align the items inside the cell.

*justify will move items horizontally.
*align will move items vertically.

*properties that ends with "-content" move things inside the container.
e.g. align-content, justify-content
*properties ending with "-items" will align things inside the cell.
e.g. align-items, justify-items
- both are container property

*"-self"
- this will override "-items"
- should be applied to a "child element"
- used for individual items

*remove individual margins and just add row-/column-gap in the container element.

*declare only the "grid-template-column" and let CSS grid arrange for the rows.