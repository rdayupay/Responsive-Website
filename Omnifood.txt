== 7 STEPS TO A GREAT WEBSITE ==
- The Process behind building a website

1. DEFINE
-> Define the project
- Define WHO the website is for
- Define WHAT the website is for (efine business or user goals)
- Define a target audience

2. PLAN
-> Plan the project
- Plan and gather website content: copy (text), images, videos, etc.. (usually provided by the client)
- For bigger sites, plan out the sitemap: what pages the site needs, and how they are related (content hierarchy)
- Based on content, plan what sections each page needs in order to convey the content's message, and in which order
- Define the website personality

3. SKETCH
-> Sketch layout and component ideas
- Think about what components you need, and how you can use them in layout patterns
- Get ideas out of your head: sketch them with pen and paper or some design softwarec(figma)
- This is an iterative process: experiment with different components and layouts, until you arrive at a first good solution
- You don't need to sketch everything, and don't make it perfect. AT some point, you're ready to jump into HTML and CSS

4. DESIGN AND BUILD
-> Design and build website
- Use decisions in Steps 1, 2, and 3 to design and build the website with HTML and CSS (designing in the browser)
- Using the layout and components you selected in Step 3. You need to design the actual visual styles.
- Create design based on selected website personality, the design guidelines, and inspiration
- Use the client's baranding whenever possible: colors, typography, icons, etc..

5. TEST AND OPTIMIZE
- Ensure website works well in all major browsers (Chrome, Firefox, Safari, Edge, or old IE??)
- Test website on actual mobile devices
- Optimize all images, in terms of dimensions and file size
- Fix simple accessibility problems (color contrast)
- Run Lighthouse performance test in Chrome DevTools and try to fix issues
- Think about Search Engine Optimization (SEO)

6. LAUNCH
- Upload website files to a hosting platform (Netlify)
- Choose and buy a great domain name, memorable and easy to write

7. MAINTAIN AND UPDATE
- keep website updated over time
- Install analytics software (Google analytics pr Fathom) to get stats about website users
- A blog that is updated regularly is a good way to keep users coming back, good for SEO.



~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
== OMNIFOOD ==

STEP 1: DEFINE

-> Define WHO the website is for
- for a client

-> Define WHAT the website is for
- Business goal: selling monthly food subscription
- User goal: eating well effortlessly. w/o spending a lot of time and money

-> Define target audience
- Busy people who like technology, are interested in a healthy diet, and have a well-paying job


STEP 2: PLAN

-> Plan and gather content
- provided

-> sitemap
- no need, we will just build a one-page marketing website (landing page)

-> Define website personality
- Based on the tech-centered target audience, as well as the actual product being sold, we will use the STARTUP/UPBEAT personality. Add some elements of CALM/PEACEFUL since product is about consumer well-being.

-> Plan page sections
## Sections
- Navigation
- Hero
- Features
- How it works
- Diets
- Meals
- Call to Action (CTA)
- Pricing
- Gallery
- Testimonials
- Featured in
- Footer

-> after arrangement based of lectures
- Navigation
- Hero
- Featured in
- How it works
- Meals (and list of Diets)
- Testimonials + Gallery
- Pricing + Features
- Call to Action (CTA)
- Footer


STEP 3: SKETCH

> Logo + Navigation
> Hero
- design and layout must follow the content, not the other way around
> Featured in
- Logo beside each other
> How it works
- Z pattern
> Meals (and list of diets)
- used Cards (image and data)
> Testimonials + Gallery
- Grid left testimonial, Right 3:4 images
> Pricing + Features
> Call to Action (CTA)
> Footer


== RESPONSIVE DESIGN PRINCIPLES ==

-- Responsive Design
- technique to make a webpage adjust its layour and visual style to any possible screen size (window or viewport size)
- makes website usable on all devices
- not a separate technology, it's all just CSS!


-- Responsive Design INGREDIENTS

01 FLUID LAYOUTS
- allow webpage to adapt to current viewport width
- use % (or vh / vw) instead of px
- use max-width instead of width

02 RESPONSIVE UNITS
- use rem unit instead of px
- make it easy to scale the entire layout up or down automatically
- helpful trick: set 1rem to 10px for easy calculations

03 FLEXIBLE IMAGES
- by default, images don't scale automatically, fix that
- use % for image dimensions, together w/ max-width property

04 MEDIA QUERIES
- bring reponsive site to life!
- change CSS styles on certain viewport widths (called breakpoints)
- useless alone, needs fluid layouts from the beginning. MQ only used at the end.


-- DESKTOP-FIRST vs MOBILE-FIRST Development

--Desktop-first
- start writing CSS for the desktop: large screen
- Use media queries to shrink design to smaller screens
- good practice to learn

--Mobile-first
- start writing CSS for moble device: small screen
- Use media queries to expand design to a large screen
- forces us to reduce websites and apps to the absolute essentials


-- rem and max-width
--MAX-WIDTH
- use max-width instead of width to occupy whole viewport and adjust to its size
{
  max-width: 1000px;
}

- if the container width is larger than the specified max-width, then the width of the element equals the value that was specified for max width.
- if the container width is less than the specified max-width, then the width of the element will be 100% of the container element widt

--REM
- rem is the root element's font-size
- html is the root document (parent element)
- if nothing's specified, 1 rem is equal the default element font-size (16px) since there's no defined font-size in html document.
- you can just change the rem size in html document, and that will affect the whole document..
{
  padding: 4rem;      //64px
  max-width: 50rem;   //800px
  font-size: 2rem;    //32px

  /* 1 rem = 16px by default */
}

- if you set 10px in html element, 1rem will now be equal to 10px instead of 16px.
- by using this, you can easily adjust all sizes for a bigger/smaller screen
html {
font-size: 10px;
}

.class {
  padding: 4rem;      //40px
  max-width: 50rem;   //500px
  font-size: 2rem;    //20px

  /* 1 rem = 10px */
}

- this can complicate things when user wants to change the font-size
- we can use % to address this problem.
- use 1rem = 10px for easy calculations
html {
  /* font-size: 10px; */

  /* 10px / 16px = 0.625 = 62.5%  */
  /* Percentage of user's browser font-size setting */

  font-size: 62.5%;
}
- 16 * 0.625 = 10px
- if the user change the font-size to 18px, then the default font-size will adjust to 11.25 (1rem) since 18*0.625 = 11.25 



== BUILDING THE HERO ==

- if you'll use section, there should be multiple sections in your page.

- add border inside the element box
use box-shadow and inset to contain the border inside
{
  box-shadow: inset 0 0 0 3px #fff;
}

- animate button in CSS
> put in the original state/class
{
  transition: all 0.3s;
}

{
  transition: background-color 0.3s;
}

- helper class to add gap between two buttons and reuse on other elements
> add this to the html element
.margin-right-sm {
  margin-right: 1.6rem !important;
}

- overlapping images
.delivered-imgs img {
  margin-right: -1.6rem;
}


== BUILDING THE HEADER ==

<header></header> - can be used in multiple website pages

<main></main> element is used to indicate the main content of the website.
- it is not used in elements that can be repeated like the <header></header> and <footer></footer>

- when you want header to stay in position, make it sticky with fixed height
.header {
  display: flex;
  justify-content: space-between;
  align-items: center;
  background-color: #fdf2e9;

  /* Because we want header to be sticky later */
  height: 9.6rem;
}


== REUSABLE GRID ==
- export grid-template-columns in another class
.grid {
  display: grid;
  gap: 9.6rem;
}

.grid--2-cols {
  grid-template-columns: repeat(2, 1fr);
}

.grid--3-cols {
  grid-template-columns: repeat(3, 1fr);
}

- reusable container to center items
.container {
  /* or 1140px */
  max-width: 120rem;
  padding: 0 3.2rem;
  margin: 0 auto;
}

-- Hero class can also be reusable like the .container,
but sometimes, it's much more beautiful when the hero section is a little bigger, hence the difference.



== HOW IT WORKS SECTION ==
- don't use h3 to be the smaller heading above h2, h3 is supposed to describe h2 
- you can use <span></span> instead

- Shades of grey
#000
#333
#444
#555
#fff
#eee
#ddd
#ccc
#bbb
#aaa

- CREATING CIRCLE WITHIN THE IMAGE W/O TOUCHING THE HTML FILE
> use pseudo elements ::before and ::after
> first, you need to create a square
> if {height} doesn't work, use {padding} since it's already included in the width
> and 60% of the parent elements width
.step-img-box::before {
  content: "";
  display: block;
  width: 60%;
  /* height: 60%; */

  /* 60% of parent's width */
  padding-bottom: 60%;
  background-color: #fdf2e9;
}

> use {position: absolute;} in the pseudo element
> and {position: relative;} in parent element
> use {z-index: -1; } to push the circle behind
.step-img-box {
  position: relative;

  display: flex;
  align-items: center;
  justify-content: center;
}

.step-img-box::before {
  content: "";
  display: block;
  width: 60%;
  /* height: 60%; */

  /* 60% of parent's width */
  padding-bottom: 60%;

  background-color: #fdf2e9;
  border-radius: 50%;

  position: absolute;
  top: 50%;
  left: 50%;
  transform: translate(-50%, -50%);

  z-index: -1;
}

> create another circle inside the first circle
.step-img-box::before,
.step-img-box::after {
  content: "";
  display: block;
  border-radius: 50%;
  position: absolute;
  top: 50%;
  left: 50%;
  transform: translate(-50%, -50%);
}

.step-img-box::before {
  width: 60%;
  /* height: 60%; */

  /* 60% of parent's width */
  padding-bottom: 60%;

  background-color: #fdf2e9;
  z-index: -2;
}

.step-img-box::after {
  width: 45%;
  padding-bottom: 45%;
  background-color: #fae5d3;
  z-index: -1;
}


== FEATURED IN SECTION ==
- add image filter to change appearance
> this will make it all grey
.logos img {
  height: 3.2rem;
  filter: brightness(0);
  opacity: 50%;
}


== MEALS SECTION ==
- use {overflow: hidden; } to smoothen the border of an image if border-radius is used

- you can use currentColor in border-bottom

- ADD BOUNCING EFFECT to cards during hover (animation)
> use {transform: translate(x, y); }
> add {transition: all 0.4s; } to the parent element
.meal {
  transition: all 0.4s;
}

.meal:hover {
  transform: translateY(-1.2rem);
}


== TESTIMONIALS SECTION ==
- you can use <figure></figure> for images
- use <figcaption></figcaption> to put caption under the image
- add <padding></padding> to create space between the container and the window 
.gallery {
  display: grid;
  grid-template-columns: repeat(3, 1fr);
  gap: 1.6rem;
  padding: 1.6rem;
}

- for gallery item, to remove spacing between images, declare it as "block"
.gallery-item img {
  display: block;
}

- when creating a grid of images, give it a fixed width to make it more flexible to work with
> this will reduce the size to occupy the container
.gallery {
  display: grid;
  grid-template-columns: repeat(3, 1fr);
}

.gallery-item img {
  display: block;
  width: 100%;
}

- for grid size, if you don't want to adjust the column size, treat the FR as percentages
{
  grid-template-columns: 55fr 45fr;
}

- to prevent the images from creating space when window size is being adjusted, set align-items to center
.section-testimonials {
  align-items: center;
}

- To animate images, use {transform: } property
.gallery-item img {
  display: block;
  width: 100%;
  transition: all 0.4s;
}

.gallery-item img:hover {
  transform: scale(1.1);
}

- use {overflow: hidden; } if you want the item contained inside the container during transform
.gallery-item {
  overflow: hidden;
}


== PRICING and FEAUTURES SECTION ==
- use {justify-self: } to move one item on the grid
.pricing-plan--starter {
  justify-self: end;
}

- when adding border to an item of the grid, check whether it's aligned with the item beside it. You can subtract the border from that item's padding.


== FEATURES SECTION ==
- when adding margin-bottom to grid, don't forget to remove the margin from the last child so there will be no redundant margin-bottoms causing too much space.
.grid {
  display: grid;
  column-gap: 6.4rem;
  row-gap: 9.6rem;

  margin-bottom: 9.6rem;
}

.grid:last-child {
  margin-bottom: 0;
}

> you can achieve both by using the pseudo class "not"
> remove {margin-bottom: } declaration from both class, and use this class instead
.grid:not(:last-child) {
  margin-bottom: 9.6rem;
}

- this will create the circle inside the icons
.feature-icon {
  color: #e67e22;
  height: 3.2rem;
  width: 3.2rem;
  background-color: #fdf2e9;
  padding: 1.6rem;
  border-radius: 50%;
}


== CTA SECTION ==
- Ways to declare Gradients
{
  background-image: linear-gradient(90deg, red, #e67e22);
}

{
  background-image: linear-gradient(to right, red, #e67e22);
}

{
  background-image: linear-gradient(to right bottom, red, #e67e22);
}

- when adding background image, take note of the folder your css file is in.
> you first need to go outside of the folder using "../" to find the folder of the image
.cta-img-box {
  background-image: url("../img/eating.jpg");
}

- Combining gradients and image
.cta-img-box {
  background-image: linear-gradient(
      to right bottom,
      rgba(235, 151, 78, 0.35),
      rgba(230, 125, 34, 0.35)
    ),
    url("../img/eating.jpg");
  background-size: cover;
  background-position: center;
}

- For the div containing the background-image, you can use role to set its content as image
> By doing so, you could delete the placeholder text so that the element will not shrink
<div
  class="cta-img-box"
  role="img"
  aria-label="Woman enjoying food"
></div>

