Layouts: Floats, Flexbox, and CSS Grid

Layouts - the way text, images, and other content is placed and arranged on a webpage.
        - visual structure, into which we place our content.

Building a layout: arranging page elements into a visual structure, instead of simply having them placed one after another (normal flow)

** 2 types of LAYOUT **
1. PAGE layout
2. COMPONENT layout - the smaller components inside a page layout


** 3 WAYS OF BUIDING LAYOUTS W/ CSS **

1. FLOAT LAYOUT - old way of building layout of all sizes.
                - uses the float CSS property.
                - still used, but getting outdated fast.

  +----+----+----+
  |    |    |    |
  |--> |--> |--> |
  |    |    |    |
  +----+----+----+

2. FLEXBOX - modern way of laying out elements in a 1-dimensional row w/o using floats.
           - perfect for component layouts          

 +---------------------------+
 |  +----+  +-----+  +----+  |
 |  |    |  |     |  |    |  |
 |  |----|--|-----|--|--> |  |
 |  |    |  |     |  |    |  |
 |  +----+  +-----+  +----+  |
 +---------------------------+

3. CSS GRID - laying out for complete 2-dimensional grid
            - perfect for big page layouts and complex components

 +-------------------------+
 |  +----------+  +-----+  |
 |  | +--->    |  |     |  |
 |  +-|--------+  +-----+  |  
 |  +-|---+  +----------+  | 
 |  | ↓   |  |          |  |
 |  +-----+  +----------+  |
 +-------------------------+



FLOATS
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~>
{
float: left
margin-bottom: xx
}

*Use margins instead of padding since we want space OUTSIDE the element.

*When the children elements are put into "float", the parent element will COLLAPSE since it has no more elements inside. It will only retain the height/padding if declared.


* Absolute positioning VS Floats *

Absolute positioning                                    
- out of flow                                           
- no impact on surrounding                              
- will based on the relative positioned container

Floats
- out of flow
- text/inline elements will wrap around the floated element
- will impact surrounding elements
- container element will not adjust its height to the floated element

For collapsing height:
add "clearfix" as class of the parent element in html.
.clearfix::after {
  clear: both;
  content: "";
  display: block;
}

The BOX MODEL w/ BOX-SIZING
box-sizing- border-box

Normal Box model - final element width = right border + right padding + width + left padding + left border

Box sizing - final element width = defined width
(paddings and borders will not be added to the dimension since it will already be included in the final length of box)


FLEXBOX
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~>
Add to the container element: any parent element that has a child element.
{
  display: flex;
}

- all the flex items will follow the tallest element.
- if no height is indicated, it will just occupy the needed space for the content.

align-items: center;    -vertical center
             flex-start -element at top
             flex-end   -element at bottom
             stretch    -stretch similar to the tallest height

justify-content: center;          -horizontally centered inside the container
                 space-between    -gives space between elements
                 space-around


FLEXBOX - set of related CSS properties for building 1-dimensional layouts
        - main idea is to automatically divide the empty space inside a container element by its child elements.
        - no manual insertion of width/height
        - makes it easy to automatically align items to one another inside a parent container, both horizontally anf vertically
        - solves common problems such as vertical centering and creating equal-height columns
        - replaces floats, allowing us to write fewer and cleaner HTML and CSS code


FLEXBOX TERMINOLOGY

1. Flex container - starts flexbox {display: flex}

2. Flex items - the child elements under a parent container declared with "display: flex" ▭

3. Main axis - the direction in which the flex items are arranged →

4. Cross axis - the other perpendicular axis ↓



1. FLEX CONTAINER

1.1 gap: 0 | <length>    - create space between item w/o using margin

1.2 justify-content:                -align items along main axis (horizontally, by default)
                     flex-start       
                     flex-end
                     center
                     space-between
                     space-around
                     space-evenly

1.3 align-items:              -align items along cross axis (vertically, by default)
                 stretch       
                 flex-start
                 flex-end
                 center
                 baseline                            

1.4 flex-direction:                 -defines the main axis
                    row             
                    row-reverse
                    column
                    column-reverse                                    

1.5 flex-wrap:                -allow items to wrap into a new line if they are too large
               nowrap 
               wrap
               wrap-reverse    

1.6 align-content:                -only applies when there are multiple lines (flex-wrap: wrap)
                   stretch
                   flex-start
                   flex-end
                   center
                   space-between
                   space-around


2. FLEX ITEMS

2.1 align-self: auto          -overwrite align-itens for individual flex items
                stretch
                flex-start
                flex-end
                center
                baseline

2.2 flex-grow: 0 | <integer>      -allow an element to grow (0 means no, 1+ means yes)

2.3 flex-shrink: 1 | <integer>    -allow an element to shrink (0 means no, 1+ means yes)

2.4 flex-basis: auto | <length>   -define an item's width, instead of the width property

2.5 flex: 0 1 auto | <int> <int> <len>    -shorthand for flex-grow, -shrink, -basis

+------------------------------------------------+
| flex-grow, -shrink, -basis are flex properties |
+------------------------------------------------+

2.6 order: 0 | <integer>    -controls order of items. -1 makes item first, 1 makes it last


!!!This is not advisable!!!
By default, flex-shrink is 1 (shrink element).
If flex-basis is too large of a space (horizontally), flexbox is allowed to shrink elements to fit the container.
To combat shrinking, put flex-shrink to 0. This will follow the length of flex-basis.

Flex-grow: 1; will make the elements fill out the whole container, divided equally.
-Turn off flex-basis to see difference.
-You can use this in parent and child elements.
-If you declare flex-grow: 2; in another child element, it will grow bigger by getting the amount of the available space.
-Flex-grow: 1; is usually used.

Flex property shorthand
-flex: 1; is usually used, not flex-grow: 1;
-always use the shorthand property flex: 0 0 200px; and not the three individually.



