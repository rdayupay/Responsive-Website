*** CSS (Cascading Style Sheets) ***
- describes the visual style and presentation of the content written in HTML

h1 {
  color: blue;
  text-align: center;
  font-size: 20px;
}

h1 - selector (all h1)
font-size: 20px; - declaration/style
font-size - property
20px - value
{ } - declaration block

Selector and declaration block = called CSS RULE

*Inline style - never use this!
<h1 style="color: blue"> </h1>

*Internal CSS
- insert <style></style> inside <head></head>
- add the CSS Rule (selector and declaration block) (h1, etc..)
seperation of concern

*External CSS
- create a seperare style.css file and move all css declaration to this file
- link the css file to the html file by
- adding <link href="style.css" rel="stylesheet" /> inside <head></head>

6 Properties to style text in CSS


*Inheritance - all paragraphs will have the same font-size

text-transform = for uppercase
style the li{} elements, not the ol{} or ul{}

*Element selector - when you use the element name as the selector.
h1 {}

*Combine the Selectors
1. List Selector
h1, h2, h3, h4, p, li {
  font-family: sans-serif;
}

2. Descendant Selector - will select the p{} inside the footer element.
footer p {
  font-size: 16px;
}

//this encodes the html structure into css, which is not a good idea!
article header p {
  font-style: italic;
}

3. Class and ID Selector - name the element to avoid using Descendant selector.
--> ID vs Class Selector
ID names cannot be repeated!
Use CLASS if you need to reuse names multiple times!

--> ID Selector - uses #
HTML file:
<p id="author"> </p>

CSS file:
#author {
  font-style: italic;
}

--> CLASS Selector - uses . (dot)
HTML file:
<p class="related-author"> </p>

CSS file:
.related-author {
  font-size: 18px;
}

+-----------------------------------------------------------+
| In reality:                                               |
|1. You don't use ID                                        |
|2. You will mostly use Class to anticipate future changes. |
|(even if used only once)                                   |
+-----------------------------------------------------------+


CSS Color:
1. RGB/RGBA Notation
1.1 Regular RGB
rgb(0, 255, 255)
1.2 RGB w/ transparency - alpha value
rgba(0,255, 255, 0.3)

2. HEXADECIMAL Notation
2.1 Instead of 0-255, we'll use 0-ff
#00ffff
2.2 Shorthand - for identical pairs
#0ff

+---------------------------------------------+
| In practice, you'll use HEXADECIMAL colors, |
|and RGBA when TRANSPARENCY is needed.        |
+---------------------------------------------+

Shades of GREY
- when colors in all 3 channels are the SAME,
we get a GREY color.
- there are 256 pure grays to choose from
rgb(0, 0, 0) / #000000 / #000
  | rgb(69, 69, 69) / #444444 / #444
  | rgb(183, 183, 183) / #b7b7b7
rgb(255, 255, 255) / #ffffff / #fff


-- PSEUDO-CLASSES - you can select the position of the child elemnt in you parent element, instead of adding classes in each line.
- very useful for alternating tables or list.
USE THIS
li:first-child {
  font-weight: bold;
}

li:nth-child(2) {
  color: red;
}

li:nth-child(odd) {
  color: red;
}

EXCEPTIONS:
THIS WILL NOT WORK!
article p:first-child {
  color: red;
}

Since <header></header> is the first child of <article></article> and not <p></p>.

*-- Styling LINKS --*
Using Pseudo-class, this will target actual links.

+---------------------------------------------+
| LINK SHOULD BE DEFINED IN THIS ORDER (LVHA) |
+---------------------------------------------+

a:link {
  color: #1098ad;
  text-decoration: none;
}

a:visited {
  /* color: #777; */
  color: #1098ad;
}

a:hover {
  color: orangered;
  font-weight: bold;
  text-decoration: underline orange;
}

a:active {
  background-color: black;
  font-style: italic;
}

-- DEVELOPER TOOLS --
Elements declared below will be followed. BOTTOM-UP hierarchy.

user agent stylesheet - default style
:hover - can be used to see the element in different states


== CSS THEORY #1: Conflicts between Selectors ==
Highest to Lowest Priority
5. Declarations marked " !important "     ----\  USUALLY
4. Inline style (style attribute in HTML) ----/ NOT USED
3. ID Selectors
2. Class (.) or Pseudo-class (:) Selector
1. Element Selector (p, div, li, etc.)
0. Universal Selector (*)                 ----> applies to all elements

+-----------------------------------+
| In case of multiple declarations, |
|the LAST SELECTOR in code applies. |
+-----------------------------------+

+-----------------------------------------------------+
| Least priority since it's just an element selector, |
|but by using the !important keyword - it becomes the |
|highest priority.                                    |
|                                                     |
| footer p {                                          |
|   color: green !important;                          |
| }                                                   |
+-----------------------------------------------------+

For LINKS
a:link - with pseudo-class has higher priority than just using "a" element as selector.

** WRITE SELECTORS AS SIMPLE AS POSSIBLE **


== CSS THEORY #2 INHERITANCE and UNIVERSAL SELECTOR ==

Inheritance
- style gets inherited from parent element to child element
- body{} is the main parent


== CSS BOX MODEL ==

1. Content - contains text, images, etc.. (width/height can be specified thru CSS properties)
2. Border - line around the element, still inside the element (around content)
3. Padding - invisible white space around the content, inside the element (between the content and border)
4. Margin - space outside the element, between elements. (outside padding)
5. Fill area - area that gets filled with background color or background image. (content and padding until border)

Content, Padding, and Border - visible parts of the element.


** Element HEIGHT and WIDTH Calculation **

FINAL ELEMENT WITDTH =  LEFT BORDER
                      + LEFT PADDING
                      + WIDTH
                      + RIGHT PADDING
                      + RIGHT BORDER

FINAL ELEMENT HEIGHT =  TOP BORDER
                      + TOP PADDING
                      + HEIGHT
                      + BOTTOM PADDING
                      + BOTTOM BORDER

- We can specify all these values using CSS properties.
- This is the default behavior, but we can change it.

Global reset
* {
  margin: 0;
  padding: 0;
}

+-----------------------+
| padding-bottom: 50px; |
| padding-top: 50px;    |
|                       |
|  Use shorthand:       |
|  padding: 50px 0;     |
+-----------------------+

When creating space, it's always good to use "margin-bottom"

Collapsing Margins - when two (2) margins occupy the same space, only one of them is actually visible, and that's the larger one between the two.

